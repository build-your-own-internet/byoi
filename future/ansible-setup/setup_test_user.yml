---
- name: Setup test user with Git repo, PATH, Docker permissions, SSH access, and static MOTD
  hosts: localhost
  become: true
  vars:
    ansible_connection: local
    test_user: test
    test_user_password: "{{ lookup('env', 'TEST_USER_PASSWORD') }}"
    git_repo_url: https://github.com/build-your-own-internet/byoi.git
    git_repo_version: tech-summit-2024-base
    clone_dest: "/home/{{ test_user }}/byoi"
    custom_motd_message: |
      ************************************************************
      Welcome to the build-your-own-internet dev server!
      This system is for development purposes only.

      Please note that this is a *shared* system.
      Any changes you make will impact ALL other users.

      please enjoy and be respectful of others.

      If you have any questions, hit us up on
      the #build-your-own-internet channel in slack.
      ************************************************************
    custom_vimrc_file: |
      let mapleader=","
      set backspace=indent,eol,start
      set cursorline
      set encoding=utf-8
      set expandtab
      set history=1000
      set hlsearch
      set incsearch
      set ignorecase
      set laststatus=2
      set list listchars=tab:»·,trail:·,nbsp:·
      set nocompatible
      set nowrap
      set number
      set numberwidth=5
      set ruler
      set showcmd
      set showtabline=2
      set shiftround
      set shiftwidth=2
      set smartcase
      set softtabstop=2
      set statusline=%F\ %r\ %y\ format:\ %{&ff};\ [%c,%l]
      set tabstop=2
      set wildmode=list:longest,list:full
      set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*
      set splitbelow
      set splitright
      set textwidth=80
      set winwidth=90
      set winheight=20
      nnoremap <CR> :nohlsearch<cr>
      map Y y$
      map D d$
      map <leader>s :w<cr>
      imap <leader>s <esc>:w<cr>  
  tasks:
    - name: Install prerequisite packages for Docker
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
        state: present

    - name: Update APT package index
      apt:
        update_cache: yes

    - name: Install Docker Engine and Docker Compose
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
      register: docker_install

    - name: Check if Docker installation was successful
      assert:
        that:
          - docker_install is succeeded
        fail_msg: "Docker installation failed."

    - name: Ensure user '{{ test_user }}' exists with specified password
      user:
        name: "{{ test_user }}"
        shell: /bin/bash
        create_home: yes
        password: "{{ test_user_password }}"
      register: user_creation

    - name: Check if user '{{ test_user }}' was created successfully
      assert:
        that:
          - user_creation is succeeded
        fail_msg: "User '{{ test_user }}' creation failed."

    - name: Add '{{ test_user }}' to 'docker' group
      user:
        name: "{{ test_user }}"
        groups: docker
        append: yes
      register: add_to_docker_group

    - name: Check if '{{ test_user }}' was added to 'docker' group successfully
      assert:
        that:
          - add_to_docker_group is succeeded
        fail_msg: "Adding '{{ test_user }}' to 'docker' group failed."

    - name: Clone Git repository into user's home directory
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ clone_dest }}"
        version: "{{ git_repo_version }}"
      become_user: "{{ test_user }}"
      register: git_clone

    - name: Check if Git repository was cloned successfully
      assert:
        that:
          - git_clone is succeeded
        fail_msg: "Git repository clone failed."

    - name: Ensure '~/byoi/bin' is in user's PATH
      lineinfile:
        path: "/home/{{ test_user }}/.bashrc"
        regexp: '^export PATH=.*byoi/bin'
        line: 'export PATH="$HOME/byoi/bin:$PATH"'
        state: present
        insertafter: EOF
      become_user: "{{ test_user }}"

    - name: Set the prompt
      lineinfile:
        path: "/home/{{ test_user }}/.bashrc"
        regexp: '^export PS1=.*'
        line: 'export PS1="$ "'
        state: present
        insertafter: EOF
      become_user: "{{ test_user }}"

    - name: Change ownership of '{{ clone_dest }}' to user '{{ test_user }}'
      file:
        path: "{{ clone_dest }}"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"
        recurse: yes

    - name: Automatically change directory on login for '{{ test_user }}'
      lineinfile:
        path: "/home/{{ test_user }}/.bashrc"
        regexp: '^cd\s+~/byoi/future/name-resolution/recursive-dns/?$'
        line: 'cd ~/byoi/future/name-resolution/recursive-dns/'
        state: present
        insertafter: EOF
      become_user: "{{ test_user }}"

    - name: Set the test user's vimrc file
      copy:
        dest: "/home/{{ test_user }}/.vimrc"
        content: "{{ custom_vimrc_file }}"
        owner: "{{ test_user }}"
        group: "{{ test_user }}"

    - name: Create SSH configuration directory if it doesn't exist
      file:
        path: /etc/ssh/sshd_config.d
        state: directory
        mode: '0755'

    - name: Allow password authentication for '{{ test_user }}' user only
      copy:
        dest: "/etc/ssh/sshd_config.d/70-allow-{{ test_user }}-password.conf"
        content: |
          Match User {{ test_user }}
              PasswordAuthentication yes
      notify: Restart SSH service

    - name: Ensure 'session optional pam_motd.so noupdate' is present and uncommented
      lineinfile:
        path: /etc/pam.d/sshd
        regexp: '^#?\s*session\s+optional\s+pam_motd.so\s+noupdate'
        line: 'session    optional   pam_motd.so noupdate'
        state: present
      notify: Restart SSH service

    - name: Comment out 'session optional pam_motd.so motd=/run/motd.dynamic'
      lineinfile:
        path: /etc/pam.d/sshd
        regexp: '^#?\s*session\s+optional\s+pam_motd.so\s+motd=/run/motd.dynamic'
        line: '# session    optional   pam_motd.so motd=/run/motd.dynamic'
        state: present
      notify: Restart SSH service

    - name: Set static MOTD for friendly welcome message
      copy:
        dest: /etc/motd
        content: "{{ custom_motd_message }}\n\n\n"
        owner: root
        group: root
        mode: '0644'

  handlers:
    - name: Restart SSH service
      service:
        name: ssh
        state: restarted
